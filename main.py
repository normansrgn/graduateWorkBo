from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import WebAppInfo
import config

bot = Bot(token=config.BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

USER_SUPPORT_ID = 481356531  
user_questions = {}  
user_state = {}  
question_id_counter = 57869  

async def on_startup(_):
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    user_state[message.from_user.id] = None
    
    start_parameter = message.get_args()
    if start_parameter:
        print(f"–ü–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–º–∞–Ω–¥—ã /start: {start_parameter}")
    
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = [
        types.KeyboardButton(text="üëü–ö–∞—Ç–∞–ª–æ–≥", web_app=WebAppInfo(url="https://normansrgn.github.io/graduateWork/")),
        types.KeyboardButton(text="üõí–ö–æ—Ä–∑–∏–Ω–∞"),
        types.KeyboardButton(text="üì≤–ö–æ–Ω—Ç–∞–∫—Ç—ã"),
        types.KeyboardButton(text="üí¨–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
    ]
    keyboard.add(*buttons)

    user_name = message.from_user.first_name
    response_text = (
        f"üëü –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        f"üî• –î–∞–≤–Ω–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–≤–æ—é –∏–¥–µ–∞–ª—å–Ω—É—é –ø–∞—Ä—É?\n\n"
        f"–ü–µ—Ä–µ—Ö–æ–¥–∏ –≤ –Ω–∞—à –∫–∞—Ç–∞–ª–æ–≥ –∏ –≤—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —Ç–≤–æ–π —Å—Ç–∏–ª—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º.\n"
        f"–ò –Ω–µ –∑–∞–±—É–¥—å, —É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –¥–ª—è —Ç–µ–±—è!"
    )

    await message.answer(response_text, reply_markup=keyboard)

@dp.message_handler(lambda message: message.text in ["üõí–ö–æ—Ä–∑–∏–Ω–∞", "üì≤–ö–æ–Ω—Ç–∞–∫—Ç—ã", "üí¨–ü–æ–¥–¥–µ—Ä–∂–∫–∞"])
async def handle_menu_buttons(message: types.Message):
    user_id = message.from_user.id
    
    if message.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
        await message.answer("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        user_state[user_id] = None
    elif message.text == "üì≤–ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: +77777777777")
        user_state[user_id] = None
    elif message.text == "üí¨–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

        global question_id_counter
        user_questions[user_id] = {
            'name': message.from_user.first_name,
            'question': None,
            'question_id': question_id_counter
        }
        user_state[user_id] = 'support'
        question_id_counter += 1

@dp.message_handler(lambda message: user_state.get(message.from_user.id) == 'support')
async def handle_user_questions(message: types.Message):
    user_id = message.from_user.id
    question = message.text

    if user_id in user_questions:
        user_questions[user_id]['question'] = question
        question_id = user_questions[user_id]['question_id']
        formatted_question_id = f"{question_id:05}"  
        try:
            await bot.send_message(
                USER_SUPPORT_ID, 
                f"–û–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{formatted_question_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_questions[user_id]['name']} (ID: {user_id}):\n\n{question}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ–≥–æ."
            )
            await message.answer(f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ (‚Ññ{formatted_question_id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

            user_state[user_id] = None
        except Exception as e:
            print(f"Failed to send question to support: {e}")

@dp.message_handler(lambda message: message.from_user.id == USER_SUPPORT_ID)
async def handle_support_replies(message: types.Message):
    response_text = message.text
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å
    for user_id, info in user_questions.items():
        if info['question']:
            question_id = info['question_id']
            formatted_question_id = f"{question_id:05}"  
            try:
                await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ ‚Ññ{formatted_question_id} –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ ({info['name']}):\n\n{response_text}")
                
                del user_questions[user_id]

                await bot.send_message(USER_SUPPORT_ID, "–û—Ç–≤–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–ª–∏–µ–Ω—Ç—É.")

                break  
            except Exception as e:
                print(f"Failed to send message to user {user_id}: {e}")
                continue

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞–º–∏
@dp.message_handler(lambda message: message.text not in ["–ö–æ—Ä–∑–∏–Ω–∞", "–ö–æ–Ω—Ç–∞–∫—Ç—ã", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞", "/start"])
async def handle_unknown_messages(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)